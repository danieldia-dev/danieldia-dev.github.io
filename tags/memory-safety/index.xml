<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Memory Safety on Daniel Dia's Website</title><link>https://danieldia-dev.github.io/tags/memory-safety/</link><description>Recent content in Memory Safety on Daniel Dia's Website</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 27 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://danieldia-dev.github.io/tags/memory-safety/index.xml" rel="self" type="application/rss+xml"/><item><title>A Systems Programmer's Case for Rust</title><link>https://danieldia-dev.github.io/blog/systems_programmer_case_rust/</link><pubDate>Sat, 27 Sep 2025 00:00:00 +0000</pubDate><guid>https://danieldia-dev.github.io/blog/systems_programmer_case_rust/</guid><description>A technical deep-dive into Rust&amp;rsquo;s core design principles, comparing its approach to memory safety, concurrency, and tooling against C++, Java, and Haskell. We explore why major tech companies are adopting it for critical systems and identify the ideal use cases for the language.</description></item></channel></rss>